using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcubature"], :libcubature),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/stevengj/CubatureBuilder/releases/download/v1.0.3+3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Cubature.v1.0.3.aarch64-linux-gnu.tar.gz", "b048cae23ebe287369588106c6207e890891cf0118fab258422d3a933324d7c8"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Cubature.v1.0.3.aarch64-linux-musl.tar.gz", "bab6f4c7f4604c99a511c6135c674d62cea7e52f7930c26f3784c5b69158ead4"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Cubature.v1.0.3.arm-linux-gnueabihf.tar.gz", "207b27e405210cf68bee53318419d55f14feb112133797387372c04413697870"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Cubature.v1.0.3.arm-linux-musleabihf.tar.gz", "7ad612db778dc81808ec851f60558dc0cca38939499c600d105aa7e52ea8e038"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Cubature.v1.0.3.i686-linux-gnu.tar.gz", "0877cd74eb17bc20738af279ce6f42526e7e964da4b4736cd1f5e21f55fd8b59"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Cubature.v1.0.3.i686-linux-musl.tar.gz", "522da7c274291770ee6e8be57755216f929f9d2cd1881b35751829270b4ca744"),
    Windows(:i686) => ("$bin_prefix/Cubature.v1.0.3.i686-w64-mingw32.tar.gz", "5e207c6438685d57f7a51255ae82eafd6862e9c3892f36a66c3dc7b31d556f78"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Cubature.v1.0.3.powerpc64le-linux-gnu.tar.gz", "2e9f21466896be6261eb36c74ee1714b61b66a58a5aee348c03bf7c2cb7d0e97"),
    MacOS(:x86_64) => ("$bin_prefix/Cubature.v1.0.3.x86_64-apple-darwin14.tar.gz", "487ad79c86971adc1f0b2bd6b8a9ec18aba6f37c0f6a7f2cd19ec4dbeebd7411"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Cubature.v1.0.3.x86_64-linux-gnu.tar.gz", "5ac07910e5a49b8bc50c418e84d5f6612c83f020e1cd81831b43d85496fa71a9"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Cubature.v1.0.3.x86_64-linux-musl.tar.gz", "8855f5f2d263b08c09891e97e17c7fffc8aa8e5a8f10c87e822aa60c1963a9c4"),
    FreeBSD(:x86_64) => ("$bin_prefix/Cubature.v1.0.3.x86_64-unknown-freebsd11.1.tar.gz", "547964aca26e8daca3b4c690791580f34ca890330d32f6ac2b9a00ba17fe951a"),
    Windows(:x86_64) => ("$bin_prefix/Cubature.v1.0.3.x86_64-w64-mingw32.tar.gz", "f294270819de5e14593fa98c9c7b99bc791953c4e3955bc3b7058ce0d1c68376"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
